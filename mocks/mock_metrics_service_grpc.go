// Code generated by MockGen. DO NOT EDIT.
// Source: ./proto/gen/metrics/metrics_service_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=./proto/gen/metrics/metrics_service_grpc.pb.go -destination=./mocks/mock_metrics_service_grpc.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	metrics "github.com/Stern-Ritter/metrics-and-alerting-service/proto/gen/metrics"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockMetricsClient is a mock of MetricsClient interface.
type MockMetricsClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsClientMockRecorder
}

// MockMetricsClientMockRecorder is the mock recorder for MockMetricsClient.
type MockMetricsClientMockRecorder struct {
	mock *MockMetricsClient
}

// NewMockMetricsClient creates a new mock instance.
func NewMockMetricsClient(ctrl *gomock.Controller) *MockMetricsClient {
	mock := &MockMetricsClient{ctrl: ctrl}
	mock.recorder = &MockMetricsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsClient) EXPECT() *MockMetricsClientMockRecorder {
	return m.recorder
}

// GetMetric mocks base method.
func (m *MockMetricsClient) GetMetric(ctx context.Context, in *metrics.GetMetricRequest, opts ...grpc.CallOption) (*metrics.GetMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetric", varargs...)
	ret0, _ := ret[0].(*metrics.GetMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetric indicates an expected call of GetMetric.
func (mr *MockMetricsClientMockRecorder) GetMetric(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetric", reflect.TypeOf((*MockMetricsClient)(nil).GetMetric), varargs...)
}

// GetMetrics mocks base method.
func (m *MockMetricsClient) GetMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*metrics.GetMetricsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetrics", varargs...)
	ret0, _ := ret[0].(*metrics.GetMetricsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockMetricsClientMockRecorder) GetMetrics(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockMetricsClient)(nil).GetMetrics), varargs...)
}

// Ping mocks base method.
func (m *MockMetricsClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockMetricsClientMockRecorder) Ping(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMetricsClient)(nil).Ping), varargs...)
}

// UpdateMetric mocks base method.
func (m *MockMetricsClient) UpdateMetric(ctx context.Context, in *metrics.UpdateMetricRequest, opts ...grpc.CallOption) (*metrics.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMetric", varargs...)
	ret0, _ := ret[0].(*metrics.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetric indicates an expected call of UpdateMetric.
func (mr *MockMetricsClientMockRecorder) UpdateMetric(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetric", reflect.TypeOf((*MockMetricsClient)(nil).UpdateMetric), varargs...)
}

// UpdateMetricsBatch mocks base method.
func (m *MockMetricsClient) UpdateMetricsBatch(ctx context.Context, in *metrics.UpdateMetricsBatchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMetricsBatch", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricsBatch indicates an expected call of UpdateMetricsBatch.
func (mr *MockMetricsClientMockRecorder) UpdateMetricsBatch(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricsBatch", reflect.TypeOf((*MockMetricsClient)(nil).UpdateMetricsBatch), varargs...)
}

// MockMetricsServer is a mock of MetricsServer interface.
type MockMetricsServer struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsServerMockRecorder
}

// MockMetricsServerMockRecorder is the mock recorder for MockMetricsServer.
type MockMetricsServerMockRecorder struct {
	mock *MockMetricsServer
}

// NewMockMetricsServer creates a new mock instance.
func NewMockMetricsServer(ctrl *gomock.Controller) *MockMetricsServer {
	mock := &MockMetricsServer{ctrl: ctrl}
	mock.recorder = &MockMetricsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsServer) EXPECT() *MockMetricsServerMockRecorder {
	return m.recorder
}

// GetMetric mocks base method.
func (m *MockMetricsServer) GetMetric(arg0 context.Context, arg1 *metrics.GetMetricRequest) (*metrics.GetMetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetric", arg0, arg1)
	ret0, _ := ret[0].(*metrics.GetMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetric indicates an expected call of GetMetric.
func (mr *MockMetricsServerMockRecorder) GetMetric(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetric", reflect.TypeOf((*MockMetricsServer)(nil).GetMetric), arg0, arg1)
}

// GetMetrics mocks base method.
func (m *MockMetricsServer) GetMetrics(arg0 context.Context, arg1 *emptypb.Empty) (*metrics.GetMetricsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", arg0, arg1)
	ret0, _ := ret[0].(*metrics.GetMetricsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockMetricsServerMockRecorder) GetMetrics(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockMetricsServer)(nil).GetMetrics), arg0, arg1)
}

// Ping mocks base method.
func (m *MockMetricsServer) Ping(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockMetricsServerMockRecorder) Ping(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMetricsServer)(nil).Ping), arg0, arg1)
}

// UpdateMetric mocks base method.
func (m *MockMetricsServer) UpdateMetric(arg0 context.Context, arg1 *metrics.UpdateMetricRequest) (*metrics.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetric", arg0, arg1)
	ret0, _ := ret[0].(*metrics.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetric indicates an expected call of UpdateMetric.
func (mr *MockMetricsServerMockRecorder) UpdateMetric(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetric", reflect.TypeOf((*MockMetricsServer)(nil).UpdateMetric), arg0, arg1)
}

// UpdateMetricsBatch mocks base method.
func (m *MockMetricsServer) UpdateMetricsBatch(arg0 context.Context, arg1 *metrics.UpdateMetricsBatchRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetricsBatch", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricsBatch indicates an expected call of UpdateMetricsBatch.
func (mr *MockMetricsServerMockRecorder) UpdateMetricsBatch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricsBatch", reflect.TypeOf((*MockMetricsServer)(nil).UpdateMetricsBatch), arg0, arg1)
}

// mustEmbedUnimplementedMetricsServer mocks base method.
func (m *MockMetricsServer) mustEmbedUnimplementedMetricsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMetricsServer")
}

// mustEmbedUnimplementedMetricsServer indicates an expected call of mustEmbedUnimplementedMetricsServer.
func (mr *MockMetricsServerMockRecorder) mustEmbedUnimplementedMetricsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMetricsServer", reflect.TypeOf((*MockMetricsServer)(nil).mustEmbedUnimplementedMetricsServer))
}

// MockUnsafeMetricsServer is a mock of UnsafeMetricsServer interface.
type MockUnsafeMetricsServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMetricsServerMockRecorder
}

// MockUnsafeMetricsServerMockRecorder is the mock recorder for MockUnsafeMetricsServer.
type MockUnsafeMetricsServerMockRecorder struct {
	mock *MockUnsafeMetricsServer
}

// NewMockUnsafeMetricsServer creates a new mock instance.
func NewMockUnsafeMetricsServer(ctrl *gomock.Controller) *MockUnsafeMetricsServer {
	mock := &MockUnsafeMetricsServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMetricsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMetricsServer) EXPECT() *MockUnsafeMetricsServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMetricsServer mocks base method.
func (m *MockUnsafeMetricsServer) mustEmbedUnimplementedMetricsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMetricsServer")
}

// mustEmbedUnimplementedMetricsServer indicates an expected call of mustEmbedUnimplementedMetricsServer.
func (mr *MockUnsafeMetricsServerMockRecorder) mustEmbedUnimplementedMetricsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMetricsServer", reflect.TypeOf((*MockUnsafeMetricsServer)(nil).mustEmbedUnimplementedMetricsServer))
}
