// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/storage/metricDbStorage.go
//
// Generated by this command:
//
//	mockgen -source=./internal/storage/metricDbStorage.go -destination ./internal/service/server/mock_db_storage_test.go -package server
//

// Package server is a generated GoMock package.
package server

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDBStorage is a mock of DBStorage interface.
type MockDBStorage struct {
	ctrl     *gomock.Controller
	recorder *MockDBStorageMockRecorder
}

// MockDBStorageMockRecorder is the mock recorder for MockDBStorage.
type MockDBStorageMockRecorder struct {
	mock *MockDBStorage
}

// NewMockDBStorage creates a new mock instance.
func NewMockDBStorage(ctrl *gomock.Controller) *MockDBStorage {
	mock := &MockDBStorage{ctrl: ctrl}
	mock.recorder = &MockDBStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBStorage) EXPECT() *MockDBStorageMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockDBStorage) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockDBStorageMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDBStorage)(nil).Ping), ctx)
}
