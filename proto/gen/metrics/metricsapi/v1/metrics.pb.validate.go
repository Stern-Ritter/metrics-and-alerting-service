// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: metrics/metricsapi/v1/metrics.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MetricData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MetricData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetricDataMultiError, or
// nil if none found.
func (m *MetricData) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := MetricDataValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _MetricData_Type_InLookup[m.GetType()]; !ok {
		err := MetricDataValidationError{
			field:  "Type",
			reason: "value must be in list [gauge counter]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch v := m.MetricValue.(type) {
	case *MetricData_Delta:
		if v == nil {
			err := MetricDataValidationError{
				field:  "MetricValue",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if m.GetDelta() < 0 {
			err := MetricDataValidationError{
				field:  "Delta",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *MetricData_Value:
		if v == nil {
			err := MetricDataValidationError{
				field:  "MetricValue",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Value
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return MetricDataMultiError(errors)
	}

	return nil
}

// MetricDataMultiError is an error wrapping multiple validation errors
// returned by MetricData.ValidateAll() if the designated constraints aren't met.
type MetricDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricDataMultiError) AllErrors() []error { return m }

// MetricDataValidationError is the validation error returned by
// MetricData.Validate if the designated constraints aren't met.
type MetricDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricDataValidationError) ErrorName() string { return "MetricDataValidationError" }

// Error satisfies the builtin error interface
func (e MetricDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricDataValidationError{}

var _MetricData_Type_InLookup = map[string]struct{}{
	"gauge":   {},
	"counter": {},
}

// Validate checks the field values on MetricInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MetricInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetricInfoMultiError, or
// nil if none found.
func (m *MetricInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := MetricInfoValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _MetricInfo_Type_InLookup[m.GetType()]; !ok {
		err := MetricInfoValidationError{
			field:  "Type",
			reason: "value must be in list [gauge counter]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MetricInfoMultiError(errors)
	}

	return nil
}

// MetricInfoMultiError is an error wrapping multiple validation errors
// returned by MetricInfo.ValidateAll() if the designated constraints aren't met.
type MetricInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricInfoMultiError) AllErrors() []error { return m }

// MetricInfoValidationError is the validation error returned by
// MetricInfo.Validate if the designated constraints aren't met.
type MetricInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricInfoValidationError) ErrorName() string { return "MetricInfoValidationError" }

// Error satisfies the builtin error interface
func (e MetricInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricInfoValidationError{}

var _MetricInfo_Type_InLookup = map[string]struct{}{
	"gauge":   {},
	"counter": {},
}

// Validate checks the field values on MetricsV1ServiceUpdateMetricRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MetricsV1ServiceUpdateMetricRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsV1ServiceUpdateMetricRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MetricsV1ServiceUpdateMetricRequestMultiError, or nil if none found.
func (m *MetricsV1ServiceUpdateMetricRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsV1ServiceUpdateMetricRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetric()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetricsV1ServiceUpdateMetricRequestValidationError{
					field:  "Metric",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetricsV1ServiceUpdateMetricRequestValidationError{
					field:  "Metric",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetric()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetricsV1ServiceUpdateMetricRequestValidationError{
				field:  "Metric",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MetricsV1ServiceUpdateMetricRequestMultiError(errors)
	}

	return nil
}

// MetricsV1ServiceUpdateMetricRequestMultiError is an error wrapping multiple
// validation errors returned by
// MetricsV1ServiceUpdateMetricRequest.ValidateAll() if the designated
// constraints aren't met.
type MetricsV1ServiceUpdateMetricRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsV1ServiceUpdateMetricRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsV1ServiceUpdateMetricRequestMultiError) AllErrors() []error { return m }

// MetricsV1ServiceUpdateMetricRequestValidationError is the validation error
// returned by MetricsV1ServiceUpdateMetricRequest.Validate if the designated
// constraints aren't met.
type MetricsV1ServiceUpdateMetricRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsV1ServiceUpdateMetricRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsV1ServiceUpdateMetricRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsV1ServiceUpdateMetricRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsV1ServiceUpdateMetricRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsV1ServiceUpdateMetricRequestValidationError) ErrorName() string {
	return "MetricsV1ServiceUpdateMetricRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MetricsV1ServiceUpdateMetricRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsV1ServiceUpdateMetricRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsV1ServiceUpdateMetricRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsV1ServiceUpdateMetricRequestValidationError{}

// Validate checks the field values on MetricsV1ServiceUpdateMetricResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MetricsV1ServiceUpdateMetricResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsV1ServiceUpdateMetricResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MetricsV1ServiceUpdateMetricResponseMultiError, or nil if none found.
func (m *MetricsV1ServiceUpdateMetricResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsV1ServiceUpdateMetricResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetric()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetricsV1ServiceUpdateMetricResponseValidationError{
					field:  "Metric",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetricsV1ServiceUpdateMetricResponseValidationError{
					field:  "Metric",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetric()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetricsV1ServiceUpdateMetricResponseValidationError{
				field:  "Metric",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MetricsV1ServiceUpdateMetricResponseMultiError(errors)
	}

	return nil
}

// MetricsV1ServiceUpdateMetricResponseMultiError is an error wrapping multiple
// validation errors returned by
// MetricsV1ServiceUpdateMetricResponse.ValidateAll() if the designated
// constraints aren't met.
type MetricsV1ServiceUpdateMetricResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsV1ServiceUpdateMetricResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsV1ServiceUpdateMetricResponseMultiError) AllErrors() []error { return m }

// MetricsV1ServiceUpdateMetricResponseValidationError is the validation error
// returned by MetricsV1ServiceUpdateMetricResponse.Validate if the designated
// constraints aren't met.
type MetricsV1ServiceUpdateMetricResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsV1ServiceUpdateMetricResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsV1ServiceUpdateMetricResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsV1ServiceUpdateMetricResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsV1ServiceUpdateMetricResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsV1ServiceUpdateMetricResponseValidationError) ErrorName() string {
	return "MetricsV1ServiceUpdateMetricResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MetricsV1ServiceUpdateMetricResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsV1ServiceUpdateMetricResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsV1ServiceUpdateMetricResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsV1ServiceUpdateMetricResponseValidationError{}

// Validate checks the field values on
// MetricsV1ServiceUpdateMetricsBatchRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MetricsV1ServiceUpdateMetricsBatchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MetricsV1ServiceUpdateMetricsBatchRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MetricsV1ServiceUpdateMetricsBatchRequestMultiError, or nil if none found.
func (m *MetricsV1ServiceUpdateMetricsBatchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsV1ServiceUpdateMetricsBatchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetMetrics()) < 1 {
		err := MetricsV1ServiceUpdateMetricsBatchRequestValidationError{
			field:  "Metrics",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMetrics() {
		_, _ = idx, item

		if item == nil {
			err := MetricsV1ServiceUpdateMetricsBatchRequestValidationError{
				field:  fmt.Sprintf("Metrics[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MetricsV1ServiceUpdateMetricsBatchRequestValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MetricsV1ServiceUpdateMetricsBatchRequestValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetricsV1ServiceUpdateMetricsBatchRequestValidationError{
					field:  fmt.Sprintf("Metrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MetricsV1ServiceUpdateMetricsBatchRequestMultiError(errors)
	}

	return nil
}

// MetricsV1ServiceUpdateMetricsBatchRequestMultiError is an error wrapping
// multiple validation errors returned by
// MetricsV1ServiceUpdateMetricsBatchRequest.ValidateAll() if the designated
// constraints aren't met.
type MetricsV1ServiceUpdateMetricsBatchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsV1ServiceUpdateMetricsBatchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsV1ServiceUpdateMetricsBatchRequestMultiError) AllErrors() []error { return m }

// MetricsV1ServiceUpdateMetricsBatchRequestValidationError is the validation
// error returned by MetricsV1ServiceUpdateMetricsBatchRequest.Validate if the
// designated constraints aren't met.
type MetricsV1ServiceUpdateMetricsBatchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsV1ServiceUpdateMetricsBatchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsV1ServiceUpdateMetricsBatchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsV1ServiceUpdateMetricsBatchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsV1ServiceUpdateMetricsBatchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsV1ServiceUpdateMetricsBatchRequestValidationError) ErrorName() string {
	return "MetricsV1ServiceUpdateMetricsBatchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MetricsV1ServiceUpdateMetricsBatchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsV1ServiceUpdateMetricsBatchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsV1ServiceUpdateMetricsBatchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsV1ServiceUpdateMetricsBatchRequestValidationError{}

// Validate checks the field values on
// MetricsV1ServiceUpdateMetricsBatchResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MetricsV1ServiceUpdateMetricsBatchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MetricsV1ServiceUpdateMetricsBatchResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// MetricsV1ServiceUpdateMetricsBatchResponseMultiError, or nil if none found.
func (m *MetricsV1ServiceUpdateMetricsBatchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsV1ServiceUpdateMetricsBatchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MetricsV1ServiceUpdateMetricsBatchResponseMultiError(errors)
	}

	return nil
}

// MetricsV1ServiceUpdateMetricsBatchResponseMultiError is an error wrapping
// multiple validation errors returned by
// MetricsV1ServiceUpdateMetricsBatchResponse.ValidateAll() if the designated
// constraints aren't met.
type MetricsV1ServiceUpdateMetricsBatchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsV1ServiceUpdateMetricsBatchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsV1ServiceUpdateMetricsBatchResponseMultiError) AllErrors() []error { return m }

// MetricsV1ServiceUpdateMetricsBatchResponseValidationError is the validation
// error returned by MetricsV1ServiceUpdateMetricsBatchResponse.Validate if
// the designated constraints aren't met.
type MetricsV1ServiceUpdateMetricsBatchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsV1ServiceUpdateMetricsBatchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsV1ServiceUpdateMetricsBatchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsV1ServiceUpdateMetricsBatchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsV1ServiceUpdateMetricsBatchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsV1ServiceUpdateMetricsBatchResponseValidationError) ErrorName() string {
	return "MetricsV1ServiceUpdateMetricsBatchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MetricsV1ServiceUpdateMetricsBatchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsV1ServiceUpdateMetricsBatchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsV1ServiceUpdateMetricsBatchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsV1ServiceUpdateMetricsBatchResponseValidationError{}

// Validate checks the field values on MetricsV1ServiceGetMetricRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MetricsV1ServiceGetMetricRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsV1ServiceGetMetricRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MetricsV1ServiceGetMetricRequestMultiError, or nil if none found.
func (m *MetricsV1ServiceGetMetricRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsV1ServiceGetMetricRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetric()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetricsV1ServiceGetMetricRequestValidationError{
					field:  "Metric",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetricsV1ServiceGetMetricRequestValidationError{
					field:  "Metric",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetric()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetricsV1ServiceGetMetricRequestValidationError{
				field:  "Metric",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MetricsV1ServiceGetMetricRequestMultiError(errors)
	}

	return nil
}

// MetricsV1ServiceGetMetricRequestMultiError is an error wrapping multiple
// validation errors returned by
// MetricsV1ServiceGetMetricRequest.ValidateAll() if the designated
// constraints aren't met.
type MetricsV1ServiceGetMetricRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsV1ServiceGetMetricRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsV1ServiceGetMetricRequestMultiError) AllErrors() []error { return m }

// MetricsV1ServiceGetMetricRequestValidationError is the validation error
// returned by MetricsV1ServiceGetMetricRequest.Validate if the designated
// constraints aren't met.
type MetricsV1ServiceGetMetricRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsV1ServiceGetMetricRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsV1ServiceGetMetricRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsV1ServiceGetMetricRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsV1ServiceGetMetricRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsV1ServiceGetMetricRequestValidationError) ErrorName() string {
	return "MetricsV1ServiceGetMetricRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MetricsV1ServiceGetMetricRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsV1ServiceGetMetricRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsV1ServiceGetMetricRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsV1ServiceGetMetricRequestValidationError{}

// Validate checks the field values on MetricsV1ServiceGetMetricResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MetricsV1ServiceGetMetricResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsV1ServiceGetMetricResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MetricsV1ServiceGetMetricResponseMultiError, or nil if none found.
func (m *MetricsV1ServiceGetMetricResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsV1ServiceGetMetricResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetric()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetricsV1ServiceGetMetricResponseValidationError{
					field:  "Metric",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetricsV1ServiceGetMetricResponseValidationError{
					field:  "Metric",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetric()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetricsV1ServiceGetMetricResponseValidationError{
				field:  "Metric",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MetricsV1ServiceGetMetricResponseMultiError(errors)
	}

	return nil
}

// MetricsV1ServiceGetMetricResponseMultiError is an error wrapping multiple
// validation errors returned by
// MetricsV1ServiceGetMetricResponse.ValidateAll() if the designated
// constraints aren't met.
type MetricsV1ServiceGetMetricResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsV1ServiceGetMetricResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsV1ServiceGetMetricResponseMultiError) AllErrors() []error { return m }

// MetricsV1ServiceGetMetricResponseValidationError is the validation error
// returned by MetricsV1ServiceGetMetricResponse.Validate if the designated
// constraints aren't met.
type MetricsV1ServiceGetMetricResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsV1ServiceGetMetricResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsV1ServiceGetMetricResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsV1ServiceGetMetricResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsV1ServiceGetMetricResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsV1ServiceGetMetricResponseValidationError) ErrorName() string {
	return "MetricsV1ServiceGetMetricResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MetricsV1ServiceGetMetricResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsV1ServiceGetMetricResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsV1ServiceGetMetricResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsV1ServiceGetMetricResponseValidationError{}

// Validate checks the field values on MetricsV1ServiceGetMetricsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MetricsV1ServiceGetMetricsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsV1ServiceGetMetricsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MetricsV1ServiceGetMetricsRequestMultiError, or nil if none found.
func (m *MetricsV1ServiceGetMetricsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsV1ServiceGetMetricsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MetricsV1ServiceGetMetricsRequestMultiError(errors)
	}

	return nil
}

// MetricsV1ServiceGetMetricsRequestMultiError is an error wrapping multiple
// validation errors returned by
// MetricsV1ServiceGetMetricsRequest.ValidateAll() if the designated
// constraints aren't met.
type MetricsV1ServiceGetMetricsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsV1ServiceGetMetricsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsV1ServiceGetMetricsRequestMultiError) AllErrors() []error { return m }

// MetricsV1ServiceGetMetricsRequestValidationError is the validation error
// returned by MetricsV1ServiceGetMetricsRequest.Validate if the designated
// constraints aren't met.
type MetricsV1ServiceGetMetricsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsV1ServiceGetMetricsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsV1ServiceGetMetricsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsV1ServiceGetMetricsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsV1ServiceGetMetricsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsV1ServiceGetMetricsRequestValidationError) ErrorName() string {
	return "MetricsV1ServiceGetMetricsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MetricsV1ServiceGetMetricsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsV1ServiceGetMetricsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsV1ServiceGetMetricsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsV1ServiceGetMetricsRequestValidationError{}

// Validate checks the field values on MetricsV1ServiceGetMetricsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MetricsV1ServiceGetMetricsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsV1ServiceGetMetricsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MetricsV1ServiceGetMetricsResponseMultiError, or nil if none found.
func (m *MetricsV1ServiceGetMetricsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsV1ServiceGetMetricsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Metrics

	if len(errors) > 0 {
		return MetricsV1ServiceGetMetricsResponseMultiError(errors)
	}

	return nil
}

// MetricsV1ServiceGetMetricsResponseMultiError is an error wrapping multiple
// validation errors returned by
// MetricsV1ServiceGetMetricsResponse.ValidateAll() if the designated
// constraints aren't met.
type MetricsV1ServiceGetMetricsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsV1ServiceGetMetricsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsV1ServiceGetMetricsResponseMultiError) AllErrors() []error { return m }

// MetricsV1ServiceGetMetricsResponseValidationError is the validation error
// returned by MetricsV1ServiceGetMetricsResponse.Validate if the designated
// constraints aren't met.
type MetricsV1ServiceGetMetricsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsV1ServiceGetMetricsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsV1ServiceGetMetricsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsV1ServiceGetMetricsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsV1ServiceGetMetricsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsV1ServiceGetMetricsResponseValidationError) ErrorName() string {
	return "MetricsV1ServiceGetMetricsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MetricsV1ServiceGetMetricsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsV1ServiceGetMetricsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsV1ServiceGetMetricsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsV1ServiceGetMetricsResponseValidationError{}

// Validate checks the field values on MetricsV1ServicePingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MetricsV1ServicePingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsV1ServicePingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MetricsV1ServicePingRequestMultiError, or nil if none found.
func (m *MetricsV1ServicePingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsV1ServicePingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MetricsV1ServicePingRequestMultiError(errors)
	}

	return nil
}

// MetricsV1ServicePingRequestMultiError is an error wrapping multiple
// validation errors returned by MetricsV1ServicePingRequest.ValidateAll() if
// the designated constraints aren't met.
type MetricsV1ServicePingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsV1ServicePingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsV1ServicePingRequestMultiError) AllErrors() []error { return m }

// MetricsV1ServicePingRequestValidationError is the validation error returned
// by MetricsV1ServicePingRequest.Validate if the designated constraints
// aren't met.
type MetricsV1ServicePingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsV1ServicePingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsV1ServicePingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsV1ServicePingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsV1ServicePingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsV1ServicePingRequestValidationError) ErrorName() string {
	return "MetricsV1ServicePingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MetricsV1ServicePingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsV1ServicePingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsV1ServicePingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsV1ServicePingRequestValidationError{}

// Validate checks the field values on MetricsV1ServicePingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MetricsV1ServicePingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsV1ServicePingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MetricsV1ServicePingResponseMultiError, or nil if none found.
func (m *MetricsV1ServicePingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsV1ServicePingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MetricsV1ServicePingResponseMultiError(errors)
	}

	return nil
}

// MetricsV1ServicePingResponseMultiError is an error wrapping multiple
// validation errors returned by MetricsV1ServicePingResponse.ValidateAll() if
// the designated constraints aren't met.
type MetricsV1ServicePingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsV1ServicePingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsV1ServicePingResponseMultiError) AllErrors() []error { return m }

// MetricsV1ServicePingResponseValidationError is the validation error returned
// by MetricsV1ServicePingResponse.Validate if the designated constraints
// aren't met.
type MetricsV1ServicePingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsV1ServicePingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsV1ServicePingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsV1ServicePingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsV1ServicePingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsV1ServicePingResponseValidationError) ErrorName() string {
	return "MetricsV1ServicePingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MetricsV1ServicePingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsV1ServicePingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsV1ServicePingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsV1ServicePingResponseValidationError{}
